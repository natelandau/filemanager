name: Test Code

on:
    workflow_dispatch:
    push:
        paths:
            - "workflows/test-code.yml"
            - "src/**"
            - "tests/**"
            - pyproject.toml
            - poetry.lock
            - .flake8
    pull_request:
        types: [opened, reopened]
        paths-ignore:
            - "workflows/test-code.yml"
            - "src/**"
            - "tests/**"
            - pyproject.toml
            - poetry.lock
            - .flake8

concurrency:
    group: test-${{ github.ref }}
    cancel-in-progress: true

jobs:
    test-code:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: true
            matrix:
                python-version: ["3.10"]
        steps:
            - uses: step-security/harden-runner@ebacdc22ef6c2cfb85ee5ded8f2e640f4c776dd5
              with:
                  disable-sudo: true
                  egress-policy: block
                  allowed-endpoints: >
                      codecov.io:443
                      files.pythonhosted.org:443
                      github.com:443
                      install.python-poetry.org:443
                      pypi.org:443
                      storage.googleapis.com:443
                      uploader.codecov.io:443

            #----------------------------------------------
            #       check-out repo and set-up python
            #----------------------------------------------
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Setup Dependencies
              uses: ./.github/actions/setup-poetry

            # - name: Set up Python ${{ matrix.python-version }}
            #   uses: actions/setup-python@v4
            #   with:
            #       python-version: ${{ matrix.python-version }}

            #----------------------------------------------
            #  -----  install & configure poetry  -----
            #----------------------------------------------
            # - name: Install Poetry
            #   uses: snok/install-poetry@v1
            #   with:
            #       virtualenvs-create: true
            #       virtualenvs-in-project: true
            #       installer-parallel: true
            #----------------------------------------------
            #       load cached venv if cache exists
            #----------------------------------------------
            # - name: Load cached venv
            #   id: cached-poetry-dependencies
            #   uses: actions/cache@v3
            #   with:
            #       path: .venv
            #       key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
            #----------------------------------------------
            # install dependencies if cache does not exist
            #----------------------------------------------
            # - name: Install dependencies
            #   if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
            #   run: poetry install --no-interaction --no-root
            #----------------------------------------------
            # install your root project, if required
            #----------------------------------------------
            # - name: Install library
            #   run: poetry install --no-interaction

            #----------------------------------------------
            #    run linters
            #----------------------------------------------
            - name: Lint with Mypy
              run: poetry run mypy src/
            - name: lint with flake8
              run: poetry run flake8 src/
            - name: lint with pydocstyle
              run: poetry run pydocstyle src/
            - name: check pyproject.toml
              run: poetry run poetry check
            - name: lint with bandit
              run: poetry run bandit -r --configfile pyproject.toml src/
            - name: lint with black
              run: poetry run black --check src/
            - name: lint with isort
              run: poetry run isort -c src/
            - name: run vulture
              run: poetry run vulture src/
            - name: run interrogate
              run: poetry run interrogate -c pyproject.toml .
            #----------------------------------------------
            #    run test suite
            #----------------------------------------------
            - name: Run tests with pytest
              run: |
                  poetry run coverage run
                  poetry run coverage report
                  poetry run coverage xml
            # ----------------------------------------------
            #             upload coverage stats
            # ----------------------------------------------
            - name: Upload coverage
              uses: codecov/codecov-action@v3
              with:
                  # token: ${{ secrets.CODECOV_TOKEN }} # Only required for private repositories
                  files: reports/coverage.xml
                  fail_ci_if_error: true
