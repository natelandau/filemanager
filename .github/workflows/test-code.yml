name: Test Code

on:
    workflow_dispatch:
    push:
        branches:
            - "main"
        paths-ignore:
            - ".cz.yaml"
            - ".devcontainer/**"
            - ".gitignore"
            - ".pre-commit-config.yaml"
            - ".vscode/**"
            - "CHANGELOG.md"
            - "README.md"
            - "docs/**"
            - "LICENSE"
            - "cruft.json"
            - "reports/**"
    pull_request:
        types: [opened, reopened, edited]
        paths-ignore:
            - ".cz.yaml"
            - ".devcontainer/**"
            - ".gitignore"
            - ".pre-commit-config.yaml"
            - ".vscode/**"
            - "CHANGELOG.md"
            - "README.md"
            - "docs/**"
            - "LICENSE"
            - "cruft.json"
            - "reports/**"

jobs:
    test-code:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: true
            matrix:
                python-version: ["3.10"]
        steps:
            - uses: step-security/harden-runner@ebacdc22ef6c2cfb85ee5ded8f2e640f4c776dd5
              with:
                  egress-policy: audit

            #----------------------------------------------
            #       check-out repo and set-up python
            #----------------------------------------------
            - uses: actions/checkout@v3

            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ matrix.python-version }}

            #----------------------------------------------
            #  -----  install & configure poetry  -----
            #----------------------------------------------
            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true
            #----------------------------------------------
            #       load cached venv if cache exists
            #----------------------------------------------
            - name: Load cached venv
              id: cached-poetry-dependencies
              uses: actions/cache@v3
              with:
                  path: .venv
                  key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
            #----------------------------------------------
            # install dependencies if cache does not exist
            #----------------------------------------------
            - name: Install dependencies
              if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
              run: poetry install --no-interaction --no-root
            #----------------------------------------------
            # install your root project, if required
            #----------------------------------------------
            - name: Install library
              run: poetry install --no-interaction

            #----------------------------------------------
            #    run linters
            #----------------------------------------------
            - name: Lint with Mypy
              run: |
                  source .venv/bin/activate
                  mypy src/
            - name: lint with flake8
              run: |
                  source .venv/bin/activate
                  flake8 src/
            - name: lint with pydocstyle
              run: |
                  source .venv/bin/activate
                  pydocstyle src/
            - name: check pyproject.toml
              run: |
                  source .venv/bin/activate
                  poetry check
            - name: lint with bandit
              run: |
                  source .venv/bin/activate
                  bandit -r --configfile pyproject.toml src/
            - name: lint with black
              run: |
                  source .venv/bin/activate
                  black --check src/
            - name: lint with isort
              run: |
                  source .venv/bin/activate
                  isort -c src/
            - name: run vulture
              run: |
                  source .venv/bin/activate
                  vulture src/
            - name: run interrogate
              run: |
                  source .venv/bin/activate
                  interrogate -c pyproject.toml .
            #----------------------------------------------
            #    run test suite
            #----------------------------------------------
            - name: Run tests with pytest
              run: |
                  source .venv/bin/activate
                  coverage run
                  coverage report
                  coverage xml
            # ----------------------------------------------
            #             upload coverage stats
            # ----------------------------------------------
            - name: Upload coverage
              uses: codecov/codecov-action@v3
              with:
                  # token: ${{ secrets.CODECOV_TOKEN }} # Only required for private repositories
                  files: reports/coverage.xml
                  fail_ci_if_error: true
